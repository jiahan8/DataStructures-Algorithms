
data structures

list - allow duplicate obj
set - don’t allow duplicate obj, can’t have more than 1 element refer to same obj (or obj that are consider equal)
map - key-values pair

Access (get), Search(contains), Insert, Delete, Sort
ordering
null values
linear vs non-linear, amortized

Object
- Arrays
- Collections

Arrays
- Array - get O(1), contains O(n), insert O(n), delete O(n)
	- insert is O(n) because when insert in the middle of array, need to shift indexes
	- dynamic array - insert/delete at the beginning O(n), insert/delete in the middle O(n), insert/delete at the end O(1)

List
- ArrayList - O(1), O(n), O(1), O(n), 
- LinkedList (List, Queue)
    - singly LinkedList - O(n), O(n), O(1), O(1), 
    - doubly LinkedList - O(n), O(n), O(1), O(1), 
    - circular LinkedList - 
- Vector - 

Vector
- Stack - first in last out - O(n), O(n), Push O(1), Pop O(1)

Queue
- Queue - first in first out - O(n), O(n), Enqueue O(1), Dequeue O(1)
- Priority Queue (like heap structure (tree)) - O(X), search max/min O(1), insert O(log n), delete max/min O(log n), search then delete O(n) (contains is O(n) then delete is O(log n))
	- level order ordering - root is min by default, parent smaller than child by default - 
	- smallest element get remove first by default
	- use comparator, compare() method to custom its ordering
	- cannot add null value
	- implement using HashMap for better performance on lookup time O(log n) then in the process of removing, HashMap map one element (key) to one or multiple (duplicate elements) indexes (values)

Priority Queue vs Heap
Priority Queue - ADT, can use heap for implementation, compare values using comparator / comparable else use default ordering, 
Heap - data structure, find max/min, 

ADT vs data structure
ADT - logical description (interface, what it does) - List, Map
data structure - concrete (class, how it does it)- ArrayList, LinkedList, HashMap, TreeMap


Set (don’t allow duplicate obj, cannot access elements by index)
- HashSet - get O(X), contains O(1), add O(1), remove O(1) - can contain at most a null value (even though can add multiple null values), null value has a size of 1 - does not maintain original order - better performance than LinkedHashSet and TreeSet
    - LinkedHashSet - get O(1), contains O(1), add O(1), remove O(1) - original order - at most a null value (same as HashSet) - 
SortedSet
- TreeSet - O(X), contains O(log n), add O(log n), remove O(log n) - cannot contain a null value (gives Null Pointer Exception) - return sorted elements - order use supplied Comparator else use natural asc order - use compare() and compareTo() to compare elements so it removes duplicates values, does not use equals() or hashCode() to compare elements - comparator() method returns comparator used to order the elements else null
for(String a : set)


Map (key-value pairs)
- HashMap ( imp Map<k,v>, ext AbstractMap<k,v> ) - get(Object key) O(1), containsKey && containsValue O(1), put(key, value) O(1), remove O(1) ( remove(key) && remove(key, value) ) - average lookup time is O(1), worst case look up time is O(n) if the hash function is not good - loop through elements using keySet() (to access keys), values() (to access values), Map.Entry entrySet() then getKey() && getValue() (to access both keys and values)
    - LinkedHashMap ( imp Map<k,v>, ext HashMap<k,v> ) - O(1), O(1), O(1), O(1) - insertion order - allows at most one null key and allow multiple null values (same as HashMap)
- Hashtable ( imp Map<k,v>, ext Dictionary<k,v> ) - get(key) O(1), containsKey containsValue O(1), put(key, value) O(1), remove(k) remove(k,v) O(1) - similar to HashMap, average lookup time is O(1), worst case look up time is O(n) if the hash function is efficient - 
- HashTree
SortedMap
- TreeMap ( imp NavigableMap<k,v>, ext AbstractMap<k,v> ) - get(k) O(log n), containsKey containsValue O(log n), put(k,v) O(log n), remove(k) remove(k,v) O(log n)

HashMap vs Hashtable
HashMap - non-synchronized - allows at most one null key and allow multiple null values - superclass of LinkedHashSet
Hashtable - synchronized - does not allow null key or value

HashMap vs TreeMap
HashMap - no ordering - more time-efficient
TreeMap - non-synchronized - use comparator or comparable or natural key order - does not allow null key (null pointer exception) but can contains multiple null values - more memory-efficient


Trees
Binary Trees
- Binary Search Tree - O(X), search O(log n), search max O(1), insert O(log n), delete O(n), create O(n log n) - most of the time O(log n) for search, insert and delete
- Binary Tree - O(X), search O(n), insert O(n), delete O(n) 
Heaps
- Binary Heap - O(X), search O(n), search max/min O(1), insert O(log n), delete O(log n), delete max/min O(log n), peek O(1), merge O(n), search then delete O(n), build O(n) - heapify / percolate up - heap sort
- Heap - O(X), search max/min O(1), insert O(log n), delete max/min O(log n), search then delete O(n)

Binary Search Tree vs Binary Heap (complete binary tree)
BST - search any O(log n) (better) - build O(n log n) - average time insertion O(log n) - 
Binary Heap - max heap / min heap - level order insertion, if the new element is larger than its parent then do heapify else insert as level order - search any O(n) search max/min O(1) - build (n) (better) - average time insertion O(1) (better) - 
insert (one element)
build (a list of elements)

overall,
BST - find any elements
Binary Heap - find max/min, build, insert, efficiently implemented on top of arrays


Graphs -  Directed Graph, Undirected Graph, dense graph (eg. complete graph), sparse graph (few edges), breadth first search, depth first search
- AdjacencyList - check if there is edges between 2 nodes O(n), directed graph O(n^2), undirected graph O(n)
- AdjacencyMatrix - check if there is edges between 2 nodes O(1), directed graph O(n^2), undirected graph O(n^2)
- Graph
- Directed Graph
- Undirected Graph

Hashes
- HashList
- RollingHash


